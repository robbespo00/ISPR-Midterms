{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "EspositoRoberto-Assignment3.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# **Roberto Esposito - Assignment 3**"
      ],
      "metadata": {
        "id": "ZQfMpXSiPRlM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Preprocessing**"
      ],
      "metadata": {
        "id": "J05mVx1obS76"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this section:\n",
        "\n",
        "\n",
        "*   It is loaded the dataset\n",
        "*   Some preprocessing operations on the data are performed   \n",
        "\n"
      ],
      "metadata": {
        "id": "8D5PvAq0r1uF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "First of all we need to import all the required modules."
      ],
      "metadata": {
        "id": "QmiB9Nvpt2Yg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn import svm\n",
        "from sklearn.utils import gen_batches\n",
        "from sklearn.datasets import fetch_openml\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "k1_6QmM2j9z_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The [MNIST dataset](http://yann.lecun.com/exdb/mnist/) is loaded using the function ``` fetch_openml()```. \\\\\n",
        "\\\n",
        "After that the data (images and the corresponding labels) are loaded, the images are rescaled into values in the range [0, 1] and then it is applied the threshold in order to obtain binary values. \\\\\n",
        "\\\n",
        "The last step is to split the data into two disjoint set: train set and test set.\n"
      ],
      "metadata": {
        "id": "LHhB4Eu_t-SP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X, Y = fetch_openml(\"mnist_784\", version=1, return_X_y=True, as_frame=False)\n",
        "\n",
        "X /= 255\n",
        "X = (X > 0.5)\n",
        "\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=10000)"
      ],
      "metadata": {
        "id": "iqh_C5VLtwi7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"The elements of the dataset are transformed in the binary form: {np.unique(X)}\")\n",
        "print(f\"Train: {X_train.shape} {Y_train.shape} \\t Test: {X_test.shape} {Y_test.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P0WxZke-I9r4",
        "outputId": "7b5268ab-8ebc-4cf0-b69a-b1f7e4ff8829"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The elements of the dataset are transformed in the binary form: [False  True]\n",
            "Train: (60000, 784) (60000,) \t Test: (10000, 784) (10000,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Restricted Boltzmann Machine**"
      ],
      "metadata": {
        "id": "YrMJqutu6ZhK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In the following section it is implemented ```class RBM()``` and it consists of 3 functions:\n",
        "\n",
        "\n",
        "*   ```fit()```: given the data, the number of epochs, the batch dimension and the learning rate it computes the CD-1 algorithm;\n",
        "*   ```inference()```: given the data, it performs the inference and return the probabilities of the hidden units;\n",
        "*   ```reconstruct()```: given the original data, it reconstructs the input with the weights that the model learnt;\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "TE2eZkrnzV1R"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4bClBSzu0qft"
      },
      "outputs": [],
      "source": [
        "# Restricted Boltzmann Machine\n",
        "\n",
        "class RBM():\n",
        "\n",
        "\n",
        "  def __init__(self, visible_dim, hidden_dim):\n",
        "    self.visible_dim = visible_dim\n",
        "    self.hidden_dim = hidden_dim\n",
        "    self.W = np.random.randn(visible_dim, hidden_dim)\n",
        "    self.bh = np.random.randn(hidden_dim)\n",
        "    self.bv = np.random.randn(visible_dim)\n",
        "\n",
        "\n",
        "  def fit(self, X, epochs=50, batch_dim=32, learning_rate=0.5):\n",
        "\n",
        "    for epoch in range(epochs):\n",
        "      error_epoch = 0\n",
        "      batches = list(gen_batches(X.shape[0], batch_dim))\n",
        "\n",
        "      for batch in batches:\n",
        "        batch = X[batch.start:batch.stop]\n",
        "        batch_size = batch.shape[0]\n",
        "\n",
        "        # Wake\n",
        "        ones_poshidP = np.ones((batch_size, self.hidden_dim))\n",
        "        poshidP = ones_poshidP/(ones_poshidP + np.exp(-np.dot(batch,self.W) - self.bh))\n",
        "        wake = np.dot(batch.T, poshidP)\n",
        "\n",
        "        # Dream\n",
        "        ones_reconDataP = np.ones((batch_size, self.visible_dim))\n",
        "        reconDataP = ones_reconDataP / (ones_reconDataP + np.exp(-np.dot(poshidP, np.transpose(self.W))-self.bv))\n",
        "        ones_neghidP = np.ones((batch_size, self.hidden_dim))\n",
        "        neghidP = ones_neghidP / (ones_neghidP + np.exp(-np.dot(reconDataP, self.W) - self.bh))\n",
        "        dream = np.dot(np.transpose(reconDataP), neghidP)\n",
        "\n",
        "        # Error\n",
        "        error = np.sum((batch-reconDataP)**2)/batch_size\n",
        "\n",
        "        # Update CD-1\n",
        "        self.W += learning_rate*(wake-dream)/batch_size\n",
        "        self.bh += learning_rate*(np.sum(poshidP-neghidP, axis=0))/batch_size\n",
        "        self.bv += learning_rate*(np.sum(batch-reconDataP, axis=0))/batch_size\n",
        "\n",
        "        error_epoch += error\n",
        "\n",
        "      error_epoch /= len(batches)\n",
        "      print(epoch, \": error = \", error_epoch)\n",
        "  \n",
        "\n",
        "  def inference(self, X):\n",
        "    ones_poshidP = np.ones((X.shape[0], self.hidden_dim))\n",
        "    poshidP = ones_poshidP/(ones_poshidP + np.exp(-np.dot(X,self.W)-self.bh))\n",
        "    \n",
        "    return poshidP\n",
        "\n",
        "\n",
        "  def reconstruct(self, X):\n",
        "    ones_poshidP = np.ones((X.shape[0], self.hidden_dim))\n",
        "    poshidP = ones_poshidP/(ones_poshidP + np.exp(-np.dot(X,self.W)-self.bh))\n",
        "    poshidS = poshidP > np.random.uniform(size=poshidP.shape)\n",
        "    \n",
        "    ones_reconDataP = np.ones((X.shape[0], self.visible_dim))\n",
        "    reconDataP = ones_reconDataP / (ones_reconDataP + np.exp(-np.dot(poshidS,np.transpose(self.W))-self.bv))\n",
        "\n",
        "    return reconDataP\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "At this point the RBM is created and the input arguments are the number of the visible units and the number of the hidden units. \\\\\n",
        "Once the RBM is created we need to train the model and this is done through \n",
        "``` fit() ``` that takes as input the data, the number of epochs, the batch dimension and the learning rate.\n",
        "\n"
      ],
      "metadata": {
        "id": "LYNEuAVKE_H6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "rbm = RBM(X_train.shape[1], 50)\n",
        "\n",
        "rbm.fit(X_train, epochs=20, batch_dim=16, learning_rate=0.3)"
      ],
      "metadata": {
        "id": "25yLULPXLaAR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0c2d184a-e546-48d8-9b0e-6cfaf4bad8d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 : error =  39.271171709294066\n",
            "1 : error =  34.5300362095426\n",
            "2 : error =  33.22718754850658\n",
            "3 : error =  31.937372633813816\n",
            "4 : error =  30.613513367214217\n",
            "5 : error =  29.279344585532613\n",
            "6 : error =  28.485332485133053\n",
            "7 : error =  27.880963227273206\n",
            "8 : error =  27.473334930785608\n",
            "9 : error =  27.15652060977701\n",
            "10 : error =  26.893033188767124\n",
            "11 : error =  26.779711718056525\n",
            "12 : error =  26.663105629185146\n",
            "13 : error =  26.59473557362028\n",
            "14 : error =  26.49831138013023\n",
            "15 : error =  26.40437648699905\n",
            "16 : error =  26.37993658224608\n",
            "17 : error =  26.378314393474582\n",
            "18 : error =  26.407795385542887\n",
            "19 : error =  26.391875351200923\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Classifier**"
      ],
      "metadata": {
        "id": "ksN3-wlsyaQ-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In the following section it is performed a SVM on the original data and on the data obtained performing the inference. Then it is shown the accuracy score of the model over the two different data."
      ],
      "metadata": {
        "id": "xWcQGKlCL-up"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "clf = svm.SVC()\n",
        "clf.fit(X_train, Y_train)\n",
        "\n",
        "Y_pred = clf.predict(X_test)\n",
        "\n",
        "print(f\"Accuracy of the SVM on the original data: {accuracy_score(Y_test, Y_pred, normalize=True)}\")"
      ],
      "metadata": {
        "id": "1Ns65svbQuZA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d69082fd-9430-4cfa-ca85-ed35ef8646e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the SVM on the original data: 0.9763\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_rbm = rbm.inference(X_train)\n",
        "X_test_rbm = rbm.inference(X_test)"
      ],
      "metadata": {
        "id": "hnYaFbvK29SI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf = svm.SVC()\n",
        "clf.fit(X_train_rbm, Y_train)\n",
        "\n",
        "Y_pred_train = clf.predict(X_train_rbm)\n",
        "Y_pred_test = clf.predict(X_test_rbm)\n",
        "\n",
        "print(f\"Accuracy on the train test: {accuracy_score(Y_train, Y_pred_train, normalize=True)}\")\n",
        "print(f\"Accuracy on the test test: {accuracy_score(Y_test, Y_pred_test, normalize=True)}\")"
      ],
      "metadata": {
        "id": "53YY6TlyHQxZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a698b67d-8adb-4a3f-e2aa-0984db9239c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on the train test: 0.9709333333333333\n",
            "Accuracy on the test test: 0.9547\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Reconstruction**"
      ],
      "metadata": {
        "id": "FCG5azLjKp6-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In the following section it is performed the reconstruction and then it is plotted the original input with the corresponding reconstructed one."
      ],
      "metadata": {
        "id": "Zopgvg1RKsrL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "reconstructed = rbm.reconstruct(X_test)"
      ],
      "metadata": {
        "id": "AZpGRGaHK5-P"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure(figsize=(10, 4))\n",
        "\n",
        "rows = 2\n",
        "columns = 6\n",
        "\n",
        "fig.add_subplot(rows, columns, 1)\n",
        "plt.imshow(X_test[0].reshape((28,28)))\n",
        "plt.axis('off')\n",
        "\n",
        "fig.add_subplot(rows, columns, 2)\n",
        "plt.imshow(X_test[1].reshape((28,28)))\n",
        "plt.axis('off')\n",
        "\n",
        "fig.add_subplot(rows, columns, 3)\n",
        "plt.imshow(X_test[2].reshape((28, 28)))\n",
        "plt.axis('off')\n",
        "\n",
        "fig.add_subplot(rows, columns, 4)\n",
        "plt.imshow(reconstructed[0].reshape((28, 28)))\n",
        "plt.axis('off')\n",
        "\n",
        "fig.add_subplot(rows, columns, 5)\n",
        "plt.imshow(reconstructed[1].reshape((28, 28)))\n",
        "plt.axis('off')\n",
        "\n",
        "fig.add_subplot(rows, columns, 6)\n",
        "plt.imshow(reconstructed[2].reshape((28, 28)))\n",
        "plt.axis('off')\n",
        "\n",
        "fig.add_subplot(rows, columns, 7)\n",
        "plt.imshow(X_test[3].reshape((28,28)))\n",
        "plt.axis('off')\n",
        "\n",
        "fig.add_subplot(rows, columns, 8)\n",
        "plt.imshow(X_test[4].reshape((28,28)))\n",
        "plt.axis('off')\n",
        "\n",
        "fig.add_subplot(rows, columns, 9)\n",
        "plt.imshow(X_test[5].reshape((28,28)))\n",
        "plt.axis('off')\n",
        "\n",
        "fig.add_subplot(rows, columns, 10)\n",
        "plt.imshow(reconstructed[3].reshape((28, 28)))\n",
        "plt.axis('off')\n",
        "\n",
        "fig.add_subplot(rows, columns, 11)\n",
        "plt.imshow(reconstructed[4].reshape((28, 28)))\n",
        "plt.axis('off')\n",
        "\n",
        "fig.add_subplot(rows, columns, 12)\n",
        "plt.imshow(reconstructed[5].reshape((28, 28)))\n",
        "plt.axis('off')\n",
        "pass"
      ],
      "metadata": {
        "id": "1PGNpQP8BKto",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 229
        },
        "outputId": "00d39964-4fb6-4960-884c-9386c08827bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x288 with 12 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As it comes from the figure shown above the RBM is able to reconstruct the original data even if there is some noise in the reconstructed images. \\\\\n",
        "Have been tested different configuration of the hyperparameter, but it looks like they have more or less the same behavior. The reconstructed images reflect enough the original ones."
      ],
      "metadata": {
        "id": "RXw5G47KMVmE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**References:** during the development of the assignment it has been taken as reference the following guide written by G.Hinton, [A Practical Guide to Training Restricted Boltzmann Machines](https://www.cs.toronto.edu/~hinton/absps/guideTR.pdf)"
      ],
      "metadata": {
        "id": "f8pU7H1fH-nY"
      }
    }
  ]
}